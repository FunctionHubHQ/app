/* tslint:disable */
/* eslint-disable */
/**
 * GPT Lambda API
 * GPT Lambda AI API Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Code
 */
export interface Code {
    /**
     * Code cell uid
     * @type {string}
     * @memberof Code
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof Code
     */
    user_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Code
     */
    code?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Code
     */
    is_public?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Code
     */
    is_active?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Code
     */
    updated_at?: number;
    /**
     * 
     * @type {number}
     * @memberof Code
     */
    created_at?: number;
    /**
     * 
     * @type {string}
     * @memberof Code
     */
    parent_id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Code
     */
    fields_to_update?: Array<string>;
}
/**
 * 
 * @export
 * @interface CodeUpdateResponse
 */
export interface CodeUpdateResponse {
    /**
     * 
     * @type {string}
     * @memberof CodeUpdateResponse
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface ExecRequest
 */
export interface ExecRequest {
    /**
     * 
     * @type {string}
     * @memberof ExecRequest
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecRequest
     */
    exec_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecRequest
     */
    fcm_token?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExecRequest
     */
    validate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExecRequest
     */
    deployed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExecRequest
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecRequest
     */
    payload?: string;
}
/**
 * 
 * @export
 * @interface ExecResultAsync
 */
export interface ExecResultAsync {
    /**
     * 
     * @type {string}
     * @memberof ExecResultAsync
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecResultAsync
     */
    fcm_token?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecResultAsync
     */
    exec_id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExecResultAsync
     */
    validate?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExecResultAsync
     */
    result?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExecResultAsync
     */
    std_out?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExecResultAsync
     */
    std_out_str?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecResultAsync
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface GLCompletionTestRequest
 */
export interface GLCompletionTestRequest {
    /**
     * Code cell uid
     * @type {string}
     * @memberof GLCompletionTestRequest
     */
    code_id?: string;
    /**
     * 
     * @type {string}
     * @memberof GLCompletionTestRequest
     */
    fcm_token?: string;
    /**
     * 
     * @type {string}
     * @memberof GLCompletionTestRequest
     */
    user_id?: string;
    /**
     * 
     * @type {string}
     * @memberof GLCompletionTestRequest
     */
    prompt?: string;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface Spec
 */
export interface Spec {
    /**
     * 
     * @type {string}
     * @memberof Spec
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof Spec
     */
    format?: string;
}
/**
 * 
 * @export
 * @interface SpecResult
 */
export interface SpecResult {
    /**
     * 
     * @type {string}
     * @memberof SpecResult
     */
    uid?: string;
    /**
     * 
     * @type {Spec}
     * @memberof SpecResult
     */
    spec?: Spec;
    /**
     * 
     * @type {string}
     * @memberof SpecResult
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    picture?: string;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof UserProfile
     */
    roles?: { [key: string]: boolean; };
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    is_authorized?: boolean;
}
/**
 * 
 * @export
 * @interface UserProfileResponse
 */
export interface UserProfileResponse {
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    error: string;
    /**
     * 
     * @type {UserProfile}
     * @memberof UserProfileResponse
     */
    profile: UserProfile;
}

/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Call GPT completion endpoint
         * @summary Call GPT completion endpoint
         * @param {{ [key: string]: object; }} requestBody GPT Completion request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gptCompletionDeployedRequest: async (requestBody: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('gptCompletionDeployedRequest', 'requestBody', requestBody)
            const localVarPath = `/gpt-completion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Call GPT completion endpoint
         * @summary Call GPT completion endpoint
         * @param {GLCompletionTestRequest} gLCompletionTestRequest GPT Completion request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gptCompletionTestRequest: async (gLCompletionTestRequest: GLCompletionTestRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gLCompletionTestRequest' is not null or undefined
            assertParamExists('gptCompletionTestRequest', 'gLCompletionTestRequest', gLCompletionTestRequest)
            const localVarPath = `/gpt-completion/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gLCompletionTestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Call GPT completion endpoint
         * @summary Call GPT completion endpoint
         * @param {{ [key: string]: object; }} requestBody GPT Completion request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gptCompletionDeployedRequest(requestBody: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gptCompletionDeployedRequest(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Call GPT completion endpoint
         * @summary Call GPT completion endpoint
         * @param {GLCompletionTestRequest} gLCompletionTestRequest GPT Completion request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gptCompletionTestRequest(gLCompletionTestRequest: GLCompletionTestRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gptCompletionTestRequest(gLCompletionTestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Call GPT completion endpoint
         * @summary Call GPT completion endpoint
         * @param {{ [key: string]: object; }} requestBody GPT Completion request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gptCompletionDeployedRequest(requestBody: { [key: string]: object; }, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.gptCompletionDeployedRequest(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Call GPT completion endpoint
         * @summary Call GPT completion endpoint
         * @param {GLCompletionTestRequest} gLCompletionTestRequest GPT Completion request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gptCompletionTestRequest(gLCompletionTestRequest: GLCompletionTestRequest, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.gptCompletionTestRequest(gLCompletionTestRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * Call GPT completion endpoint
     * @summary Call GPT completion endpoint
     * @param {{ [key: string]: object; }} requestBody GPT Completion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public gptCompletionDeployedRequest(requestBody: { [key: string]: object; }, options?: any) {
        return ChatApiFp(this.configuration).gptCompletionDeployedRequest(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Call GPT completion endpoint
     * @summary Call GPT completion endpoint
     * @param {GLCompletionTestRequest} gLCompletionTestRequest GPT Completion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public gptCompletionTestRequest(gLCompletionTestRequest: GLCompletionTestRequest, options?: any) {
        return ChatApiFp(this.configuration).gptCompletionTestRequest(gLCompletionTestRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RuntimeApi - axios parameter creator
 * @export
 */
export const RuntimeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows user code execution if all validations pass
         * @summary Deploy user code
         * @param {ExecRequest} execRequest Deploy request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploy: async (execRequest: ExecRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'execRequest' is not null or undefined
            assertParamExists('deploy', 'execRequest', execRequest)
            const localVarPath = `/deploy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(execRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute user code in a secure sandbox
         * @summary Execute user code
         * @param {ExecRequest} execRequest Execution request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exec: async (execRequest: ExecRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'execRequest' is not null or undefined
            assertParamExists('exec', 'execRequest', execRequest)
            const localVarPath = `/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(execRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user code detail
         * @summary Get user code detail
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCodeDetail: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getCodeDetail', 'uid', uid)
            const localVarPath = `/code/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execution results are short-lived
         * @summary Get result of completed execution
         * @param {string} execId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecResult: async (execId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'execId' is not null or undefined
            assertParamExists('getExecResult', 'execId', execId)
            const localVarPath = `/e-result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (execId !== undefined) {
                localVarQueryParameter['exec_id'] = execId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCode: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserCode', 'uid', uid)
            const localVarPath = `/npm/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handles user code execution result
         * @summary Execution result handler
         * @param {ExecResultAsync} execResultAsync Execution result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleExecResult: async (execResultAsync: ExecResultAsync, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'execResultAsync' is not null or undefined
            assertParamExists('handleExecResult', 'execResultAsync', execResultAsync)
            const localVarPath = `/e-result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(execResultAsync, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handles spec generation result
         * @summary Spec result handler
         * @param {SpecResult} specResult Spec result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleSpecResult: async (specResult: SpecResult, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'specResult' is not null or undefined
            assertParamExists('handleSpecResult', 'specResult', specResult)
            const localVarPath = `/s-result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specResult, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update code
         * @summary Update code
         * @param {Code} code Update request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCode: async (code: Code, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateCode', 'code', code)
            const localVarPath = `/update-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(code, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuntimeApi - functional programming interface
 * @export
 */
export const RuntimeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RuntimeApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows user code execution if all validations pass
         * @summary Deploy user code
         * @param {ExecRequest} execRequest Deploy request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deploy(execRequest: ExecRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deploy(execRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Execute user code in a secure sandbox
         * @summary Execute user code
         * @param {ExecRequest} execRequest Execution request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exec(execRequest: ExecRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecResultAsync>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exec(execRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user code detail
         * @summary Get user code detail
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCodeDetail(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Code>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCodeDetail(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Execution results are short-lived
         * @summary Get result of completed execution
         * @param {string} execId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecResult(execId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecResultAsync>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecResult(execId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCode(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCode(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Handles user code execution result
         * @summary Execution result handler
         * @param {ExecResultAsync} execResultAsync Execution result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleExecResult(execResultAsync: ExecResultAsync, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleExecResult(execResultAsync, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Handles spec generation result
         * @summary Spec result handler
         * @param {SpecResult} specResult Spec result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleSpecResult(specResult: SpecResult, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleSpecResult(specResult, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update code
         * @summary Update code
         * @param {Code} code Update request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCode(code: Code, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RuntimeApi - factory interface
 * @export
 */
export const RuntimeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RuntimeApiFp(configuration)
    return {
        /**
         * Allows user code execution if all validations pass
         * @summary Deploy user code
         * @param {ExecRequest} execRequest Deploy request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploy(execRequest: ExecRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.deploy(execRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute user code in a secure sandbox
         * @summary Execute user code
         * @param {ExecRequest} execRequest Execution request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exec(execRequest: ExecRequest, options?: any): AxiosPromise<ExecResultAsync> {
            return localVarFp.exec(execRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user code detail
         * @summary Get user code detail
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCodeDetail(uid: string, options?: any): AxiosPromise<Code> {
            return localVarFp.getCodeDetail(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * Execution results are short-lived
         * @summary Get result of completed execution
         * @param {string} execId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecResult(execId: string, options?: any): AxiosPromise<ExecResultAsync> {
            return localVarFp.getExecResult(execId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCode(uid: string, options?: any): AxiosPromise<string> {
            return localVarFp.getUserCode(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * Handles user code execution result
         * @summary Execution result handler
         * @param {ExecResultAsync} execResultAsync Execution result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleExecResult(execResultAsync: ExecResultAsync, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.handleExecResult(execResultAsync, options).then((request) => request(axios, basePath));
        },
        /**
         * Handles spec generation result
         * @summary Spec result handler
         * @param {SpecResult} specResult Spec result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleSpecResult(specResult: SpecResult, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.handleSpecResult(specResult, options).then((request) => request(axios, basePath));
        },
        /**
         * Update code
         * @summary Update code
         * @param {Code} code Update request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCode(code: Code, options?: any): AxiosPromise<CodeUpdateResponse> {
            return localVarFp.updateCode(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RuntimeApi - object-oriented interface
 * @export
 * @class RuntimeApi
 * @extends {BaseAPI}
 */
export class RuntimeApi extends BaseAPI {
    /**
     * Allows user code execution if all validations pass
     * @summary Deploy user code
     * @param {ExecRequest} execRequest Deploy request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuntimeApi
     */
    public deploy(execRequest: ExecRequest, options?: any) {
        return RuntimeApiFp(this.configuration).deploy(execRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Execute user code in a secure sandbox
     * @summary Execute user code
     * @param {ExecRequest} execRequest Execution request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuntimeApi
     */
    public exec(execRequest: ExecRequest, options?: any) {
        return RuntimeApiFp(this.configuration).exec(execRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user code detail
     * @summary Get user code detail
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuntimeApi
     */
    public getCodeDetail(uid: string, options?: any) {
        return RuntimeApiFp(this.configuration).getCodeDetail(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Execution results are short-lived
     * @summary Get result of completed execution
     * @param {string} execId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuntimeApi
     */
    public getExecResult(execId: string, options?: any) {
        return RuntimeApiFp(this.configuration).getExecResult(execId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuntimeApi
     */
    public getUserCode(uid: string, options?: any) {
        return RuntimeApiFp(this.configuration).getUserCode(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Handles user code execution result
     * @summary Execution result handler
     * @param {ExecResultAsync} execResultAsync Execution result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuntimeApi
     */
    public handleExecResult(execResultAsync: ExecResultAsync, options?: any) {
        return RuntimeApiFp(this.configuration).handleExecResult(execResultAsync, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Handles spec generation result
     * @summary Spec result handler
     * @param {SpecResult} specResult Spec result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuntimeApi
     */
    public handleSpecResult(specResult: SpecResult, options?: any) {
        return RuntimeApiFp(this.configuration).handleSpecResult(specResult, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update code
     * @summary Update code
     * @param {Code} code Update request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuntimeApi
     */
    public updateCode(code: Code, options?: any) {
        return RuntimeApiFp(this.configuration).updateCode(code, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile(options?: any): AxiosPromise<UserProfileResponse> {
            return localVarFp.getUserprofile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Get user profile or create one if it doesn\'t exist
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserprofile(options?: any) {
        return UserApiFp(this.configuration).getUserprofile(options).then((request) => request(this.axios, this.basePath));
    }
}


